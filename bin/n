#!/usr/bin/env bash

#
# Setup.
#

VERSION="2.1.0"
UP=$'\033[A'
DOWN=$'\033[B'
N_PREFIX=${N_PREFIX-/usr/local}
BASE_VERSIONS_DIR=$N_PREFIX/n/versions

#
# Log <type> <msg>
#

log() {
  printf "  \033[36m%10s\033[0m : %s \n" $1 $2
}

#
# Exit with the given <msg ...>
#

abort() {
  printf "\n  \033[31m错误: $@\033[0m\n\n" && exit 1
}

#
# All Bin(node/io) configurations
#

BINS=("node"
      "io")
MIRROR=(${NODE_MIRROR-http://npm.taobao.org/mirrors/node/}
        ${IO_MIRROR-http://npm.taobao.org/mirrors/iojs/})
BIN_NAME=("node"
          "iojs")
VERSIONS_DIR=($BASE_VERSIONS_DIR/node
              $BASE_VERSIONS_DIR/io)

if [ -n "$PROJECT_NAME" ]; then
  BINS+=($PROJECT_NAME)
  BIN_NAME+=($PROJECT_NAME)
  if [ -z "$PROJECT_URL" ]; then
      abort "必须指定项目url(PROJECT_URL)当你配置了项目名(PROJECT_NAME)的时候"
  fi
  MIRROR+=(${PROJECT_URL})
  VERSIONS_DIR+=($BASE_VERSIONS_DIR/$PROJECT_NAME)
fi

#
# Ensure we have curl or wget support.
#

CURL_PARAMS=( "-L"
              "-#")

WGET_PARAMS=( "--no-check-certificate"
              "-q"
              "-O-")

if [ -n "$HTTP_USER" ];then
  if [ -z "$HTTP_PASSWORD" ]; then
      abort "没有找到和 ${HTTP_USER} 用户对应的http密码(HTTP_PASSWORD)"
  fi
  CURL_PARAMS+=("-u $HTTP_USER:$HTTP_PASSWORD")
  WGET_PARAMS+=("--http-password=$HTTP_PASSWORD"
                "--http-user=$HTTP_USER")
elif [ -n "$HTTP_PASSWORD" ]; then
    abort "没有给 ${HTTP_PASSWORD} 密码指定对应的http用户(HTTP_USER)"
fi

GET=

# wget support
command -v wget > /dev/null && GET="wget ${WGET_PARAMS[@]}"

command -v curl > /dev/null && GET="curl ${CURL_PARAMS[@]}" && QUIET=false

test -z "$GET" && abort "程序依赖于curl 或者 wget,请安装"

#
# State
#

DEFAULT=0
QUIET=true
ACTIVATE=true
ARCH=

#
# set_default <BIN_NAME>
#


set_default() {
  for (( i=0 ; i<${#BINS[@]} ; i++ )); do
    if test ${BINS[$i]} = $1; then
      DEFAULT=$i
    fi
  done
}

for dir in ${VERSIONS_DIR[@]}; do
  test -d $dir || mkdir -p $dir
done

#
# set_arch <arch> to override $(uname -a)
#

set_arch() {
  if test ! -z $1; then
    ARCH=$1
  else
    abort "请通过 -a|--arch <架构名(uname -a)> 指定架构名"
  fi
}

#
# Functions used when showing versions installed
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  leave_fullscreen
  exit $?
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Output usage information.
#

display_help() {
  cat <<-EOF

  使用方式: n [选项/环境] [命令] [参数]

  环境:
    n [命令] [参数]                使用默认的环境 (即node)
    n io [命令]                    设置环境为iojs,后面的[命令]对iojs起作用
    n project [命令]               使用自定义的环境,并使用非官方的源来下载
    n upgrade                      更新 n

  命令:

    n                              显示已经安装好的node版本
    n latest                       安装或激活最新版本的node
    n -a x86 latest                指定安装的架构为x86(32位)的最新版本的node
    n stable                       安装或激活最新稳定版本的node
    n <版本号>                     安装指定版本的node
    n use <版本号> [参数 ...]      使用指定版本的node来运行,并附带参数
    n bin <版本号>                 显示某个版本node二进制文件的路径
    n rm <版本号 ...>              删除指定版本(多个)的node
    n --latest                     显示最新的node版本号
    n --stable                     显示最新的稳定版node版本号
    n ls                           列出目前能安装的所有版本的node

  (iojs环境):
    n io latest                    安装或激活最新的版本
    n io -a x86 latest             指定安装的架构为x86(32位)的最新版本的iojs
    n io <版本号>                  安装指定版本号的iojs
    n io use <版本号> [参数 ...]   使用指定版本的iojs来运行,并附带参数
    n io bin <版本号>              显示某个版本iojs二进制文件的路径
    n io rm <版本号 ...>           删除指定版本(多个)的iojs
    n io --latest                  显示最新的稳定版iojs版本号
    n io ls                        列出目前能安装的所有版本的iojs

  选项:

    -V, --version   输出n的版本号
    -h, --help      显示帮助信息
    -q, --quiet     禁用curl的输出 (安静模式,如果可用)
    -d, --download  仅仅下载包但是不安装
    -a, --arch      指定并覆盖系统架构

  别名:

    which   bin
    use     as
    list    ls
    -       rm

EOF
}

err_no_installed_print_help() {
  printf "\n  \033[31m错误: 你尚未安装任何的node版本\033[0m\n"
  display_help
  exit 1
}

#
# Hide cursor.
#

hide_cursor() {
  printf "\e[?25l"
}

#
# Show cursor.
#

show_cursor() {
  printf "\e[?25h"
}

#
# Output version after selected.
#

next_version_installed() {
  list_versions_installed | grep $selected -A 1 | tail -n 1
}

#
# Output version before selected.
#

prev_version_installed() {
  list_versions_installed | grep $selected -B 1 | head -n 1
}

#
# Output n version.
#

display_n_version() {
  echo $VERSION && exit 0
}

#
# Check for installed version, and populate $active
#

check_current_version() {
  command -v node &> /dev/null
  if test $? -eq 0; then
    local current=$(node --version)
    if [ -n "$PROJECT_VERSION_CHECK" ]; then
      current=$(node -p "$PROJECT_VERSION_CHECK || process.exit(1)" || node --version)
    fi
    current=${current#v}
    for bin in ${BINS[@]}; do
      if diff &> /dev/null \
        $BASE_VERSIONS_DIR/$bin/$current/bin/node \
        $(which node) ; then
        active=$bin/$current
      fi
    done
  fi
}

#
# Check the operation is supported for io.
#

check_io_supported() {
  test $DEFAULT -eq 1 && abort "iojs 不支持 $1 "
}

#
# Display sorted versions directories paths.
#

versions_paths() {
  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \
    | sed 's|'$BASE_VERSIONS_DIR'/||g' \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1 -k 2,2n -k 3,3n -t .
}

#
# Display installed versions with <selected>
#

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    if test "$version" = "$selected"; then
      printf "  \033[36mο\033[0m $version\033[0m\n"
    else
      printf "    \033[31m$version\033[0m\n"
    fi
  done
  echo
}

#
# List installed versions.
#

list_versions_installed() {
  for version in $(versions_paths); do
    echo $version
  done
}

#
# Display current node --version and others installed.
#

display_versions() {
  enter_fullscreen
  check_current_version
  clear
  display_versions_with_selected $active

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  while true; do
    read -n 3 c
    case "$c" in
      $UP)
        clear
        display_versions_with_selected $(prev_version_installed)
        ;;
      $DOWN)
        clear
        display_versions_with_selected $(next_version_installed)
        ;;
      *)
        activate $selected
        leave_fullscreen
        exit
        ;;
    esac
  done
}

#
# Move up a line and erase.
#

erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check if the HEAD response of <url> is 200.
#

is_ok() {
  if command -v curl > /dev/null; then
    $GET -Is $1 | head -n 1 | grep 302 > /dev/null
  else
    $GET -S --spider 2>&1 $1 | head -n 1 | grep 302 > /dev/null
  fi
}

#
# Determine tarball url for <version>
#

tarball_url() {
  local version=$1
  local uname="$(uname -a)"
  local arch=x86
  local os=

  # from nave(1)
  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
  esac

  if [ ${arch} = "armv6l" -a ${BIN_NAME[$DEFAULT]} = node ]; then
    local semver=${version//./ }
    local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    [[ $major -eq "" && $minor -lt 12 ]] && arch=arm-pi
  fi

  [ ! -z $ARCH ] && arch=$ARCH

  echo "${MIRROR[$DEFAULT]}v${version}/${BIN_NAME[$DEFAULT]}-v${version}-${os}-${arch}.tar.gz"

}

#
# Disable PaX mprotect for <binary>
#

disable_pax_mprotect() {
  test -z $1 && abort "需要二进制文件"
  local binary=$1

  # try to disable mprotect via XATTR_PAX header
  local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
  local PAXCTL_ERROR=1
  if [ -x "$PAXCTL" ]; then
    $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
    PAXCTL_ERROR="$?"
  fi

  # try to disable mprotect via PT_PAX header
  if [ $PAXCTL_ERROR != 0 ]; then
    PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
    if [ -x "$PAXCTL" ]; then
      $PAXCTL -Cm "$binary" >/dev/null 2>&1
    fi
  fi
}

#
# Activate <version>
#

activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$BASE_VERSIONS_DIR/$version
    for subdir in bin lib include share; do
      if test -L "$N_PREFIX/$subdir"; then
        find "$dir/$subdir" -mindepth 1 -maxdepth 1 -exec cp -fR "{}" "$N_PREFIX/$subdir" \;
      else
        cp -fR "$dir/$subdir" $N_PREFIX
      fi
    done
    disable_pax_mprotect "$N_PREFIX/bin/node"
  fi
}

#
# Install latest version.
#

install_latest() {
  install $(display_latest_version)
}

#
# Install latest stable version.
#

install_stable() {
  check_io_supported "stable"
  install $(display_latest_stable_version)
}

#
# Install <version>
#

install() {
  local version=${1#v}

  local dots=$(echo $version | sed 's/[^.]*//g')
  if test ${#dots} -eq 1; then
    version=$($GET 2> /dev/null ${MIRROR[DEFAULT]} \
      | egrep "</a>" \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1)

    test $version || abort " 版本号不正确 ${1#v}"
  fi

  local dir=${VERSIONS_DIR[$DEFAULT]}/$version

  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then
      if $ACTIVATE ; then
        activate ${BINS[$DEFAULT]}/$version
      fi
      exit
    fi
  fi

  echo
  log 开始安装 ${BINS[$DEFAULT]}-v$version

  local url=$(tarball_url $version)
  is_ok $url || abort "没有这个版本 $version"

  log 创建目录 $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "要求root权限,请使用sudo运行"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log 正在下载 $url
  $GET $url | tar -zx --strip-components=1
  [ $QUIET == false ] && erase_line
  rm -f $dir/n.lock

  disable_pax_mprotect bin/node

  if $ACTIVATE ; then
    activate ${BINS[$DEFAULT]}/$version
    log 安装完毕 $(node --version)
  fi
  echo
}

#
# Set curl to quiet (silent) mode.
#

set_quiet() {
  command -v curl > /dev/null && GET="$GET -s" && QUIET=true
}

#
# Remove <version ...>
#

remove_versions() {
  test -z $1 && abort "请指定版本"
  check_current_version
  while test $# -ne 0; do
    local version=${1#v}
    [ "${BINS[$DEFAULT]}/$version" == "$active" ] && abort "无法移除当前已经激活的版本 ($active)"
    rm -rf ${VERSIONS_DIR[$DEFAULT]}/$version
    log 删除成功 $version
    shift
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "请指定版本"
  local version=${1#v}
  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node
  if test -f $bin; then
    printf "$bin \n"
  else
    abort "$1 并没有安装"
  fi
}

#
# Execute the given <version> of node with [args ...]
#

execute_with_version() {
  test -z $1 && abort "请指定版本"
  local version=${1#v}
  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node

  shift # remove version

  if test -f $bin; then
    $bin "$@"
  else
    abort "$version 并没有安装"
  fi
}

#
# Display the latest release version.
#

display_latest_version() {
  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | egrep -v '^0\.[0-7]\.' \
    | egrep -v '^0\.8\.[0-5]$' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the latest stable release version.
#

display_latest_stable_version() {
  check_io_supported "--stable"
  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the versions available.
#

display_remote_versions() {
  check_current_version
  local versions=""
  versions=$($GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }')
  echo
  local bin=${BINS[$DEFAULT]}
  for v in $versions; do
    if test "$active" = "$bin/$v"; then
      printf "  \033[36mο $v \033[0m\n"
    else
      if test -d $BASE_VERSIONS_DIR/$bin/$v; then
        printf "    \033[31m$v\033[0m\n"
      else
        printf "    $v \033[0m\n"
      fi
    fi
  done
  echo
}

#
# 更新n的版本
#

upgrade_n(){
  echo 开始更新n程序
  
  TMP=/tmp/n_install
  GIT_URL=https://git.danwi.me/danwi/n.git

  mkdir -p $TMP
  echo "创建临时目录 ${TMP}"
  
  cd $TMP

  echo "开始克隆项目: ${GIT_URL}"
  git clone $GIT_URL

  echo "开始安装"
  cd ./n
  echo "确认目录存在: /usr/local/bin"
  sudo mkdir -p /usr/local/bin
  echo "删除原来的旧版本(如果有)"
  sudo rm -f /usr/local/bin/n
  echo "安装新版本"
  sudo cp -f ./bin/n /usr/local/bin/n

  rm -rf $TMP
  echo "安装完成,删除临时目录"
}

#
# Handle arguments.
#

if test $# -eq 0; then
  test -z "$(versions_paths)" && err_no_installed_print_help
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_n_version ;;
      -h|--help|help) display_help; exit ;;
      -q|--quiet) set_quiet ;;
      -d|--download) ACTIVATE=false ;;
      --latest) display_latest_version; exit ;;
      --stable) display_latest_stable_version; exit ;;
      io) set_default $1 ;; # set bin and continue
      project) DEFAULT=2 ;;
      -a|--arch) shift; set_arch $1;; # set arch and continue
      bin|which) display_bin_path_for_version $2; exit ;;
      as|use) shift; execute_with_version $@; exit ;;
      rm|-) shift; remove_versions $@; exit ;;
      latest) install_latest; exit ;;
      stable) install_stable; exit ;;
      ls|list) display_remote_versions; exit ;;
      upgrade) upgrade_n; exit ;;
      *) install $1; exit ;;
    esac
    shift
  done
fi
